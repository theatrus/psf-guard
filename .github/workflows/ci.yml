name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v5

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: static/package-lock.json

    - name: "Check node runs"
      run: |
        node -v
        npm -v

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libopencv-dev clang libclang-dev \
          libwebkit2gtk-4.1-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf

    - name: Install OpenCV dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install opencv
        echo "OpenCV installed via Homebrew"

        # Set up libclang path for macOS to avoid dyld errors
        # Try both XCode and Command Line Tools paths
        if [ -d "$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/" ]; then
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/" >> $GITHUB_ENV
        else
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(xcode-select --print-path)/usr/lib/" >> $GITHUB_ENV
        fi

    - name: Cache vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      id: vcpkg-cache
      uses: actions/cache@v4
      with:
        path: C:\vcpkg
        key: ${{ runner.os }}-vcpkg-opencv4-v2

    - name: Install OpenCV dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install vcpkg if not cached
        if (!(Test-Path "C:\vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
        }

        C:\vcpkg\vcpkg integrate install

        # Install OpenCV if not already installed
        if (!(Test-Path "C:\vcpkg\installed\x64-windows\include\opencv2")) {
          C:\vcpkg\vcpkg install opencv4[contrib,nonfree]:x64-windows-static-md
        }

        # Set environment variables
        echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
        echo "OpenCV_DIR=C:\vcpkg\installed\x64-windows-static-md" >> $env:GITHUB_ENV
        echo "OPENCV_DISABLE_PROBES=pkg_config,cmake,vcpkg_cmake" >> $env:GITHUB_ENV
        echo "OPENCV_LINK_DIRS=C:\vcpkg\installed\x64-windows-static-md\lib" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.89.0
        components: rustfmt, clippy
    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-opencv-${{ hashFiles('**/Cargo.lock') }}

    - name: Install npm dependencies and build frontend
      run: |
        cd static
        npm ci
        npm run build

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Build
      run: cargo build --verbose

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose

    - name: Build release binary
      run: cargo build --verbose --release


    - name: Upload artifact (Linux)
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: psf-guard-linux-x64
        path: target/release/psf-guard

    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: psf-guard-windows-x64
        path: target/release/psf-guard.exe

    - name: Upload artifact (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: psf-guard-macos-x64
        path: target/release/psf-guard

  test-tauri:
    name: Test Tauri Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v5

    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: static/package-lock.json

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libopencv-dev clang libclang-dev \
          libwebkit2gtk-4.1-dev \
          libappindicator3-dev \
          librsvg2-dev \
          patchelf

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install opencv
        
        # Set up libclang path for macOS to avoid dyld errors
        if [ -d "$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/" ]; then
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(xcode-select --print-path)/Toolchains/XcodeDefault.xctoolchain/usr/lib/" >> $GITHUB_ENV
        else
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(xcode-select --print-path)/usr/lib/" >> $GITHUB_ENV
        fi

    - name: Cache vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      id: vcpkg-cache
      uses: actions/cache@v4
      with:
        path: C:\vcpkg
        key: ${{ runner.os }}-vcpkg-opencv4-v2

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install vcpkg if not cached
        if (!(Test-Path "C:\vcpkg")) {
          git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
          C:\vcpkg\bootstrap-vcpkg.bat
        }

        C:\vcpkg\vcpkg integrate install

        # Install OpenCV if not already installed
        if (!(Test-Path "C:\vcpkg\installed\x64-windows\include\opencv2")) {
          C:\vcpkg\vcpkg install opencv4[contrib,nonfree]:x64-windows-static-md
        }

        # Set environment variables
        echo "VCPKG_ROOT=C:\vcpkg" >> $env:GITHUB_ENV
        echo "OpenCV_DIR=C:\vcpkg\installed\x64-windows" >> $env:GITHUB_ENV
        echo "OPENCV_DISABLE_PROBES=pkg_config,cmake,vcpkg_cmake" >> $env:GITHUB_ENV
        echo "OPENCV_LINK_DIRS=C:\vcpkg\installed\x64-windows\lib" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.89.0

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-tauri-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-tauri-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-tauri-${{ hashFiles('**/Cargo.lock', '**/tauri.conf.json') }}

    - name: Install npm dependencies and build frontend
      run: |
        cd static
        npm ci
        npm run build

    - name: Install Tauri CLI
      run: cargo install tauri-cli --version "^2.0" --locked

    - name: Test Tauri compilation
      run: cargo build --features tauri --verbose

    - name: Test Tauri build process
      run: cargo tauri build --verbose

    - name: Upload Tauri artifacts (Ubuntu)
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-artifact@v4
      with:
        name: psf-guard-tauri-linux-x64
        path: |
          target/release/bundle/deb/*.deb
          target/release/bundle/appimage/*.AppImage
          target/release/psf-guard

    - name: Upload Tauri artifacts (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: psf-guard-tauri-windows-x64
        path: |
          target/release/bundle/msi/*.msi
          target/release/bundle/nsis/*.exe
          target/release/psf-guard.exe

    - name: Remove bundle so we don't cache it
      run: rm -rf target/release/bundle
      shell: bash

    - name: Upload Tauri artifacts (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: psf-guard-tauri-macos-x64
        path: |
          target/release/bundle/dmg/*.dmg
          target/release/bundle/macos/*.app
          target/release/psf-guard
